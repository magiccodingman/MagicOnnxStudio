@using Microsoft.JSInterop

<MudPaper Class="console-window" Elevation="2" Style="height: 400px; overflow-y: auto; padding: 16px;">
    @foreach (var item in ConsoleTextList)
    {
        // Check if the text contains "error:"
        if (item.Text.Contains("error:", StringComparison.OrdinalIgnoreCase)
        && !item.Text.Contains("warning:", StringComparison.OrdinalIgnoreCase))
        {
            // Split the text into "error" and the remaining text
            var errorTextIndex = item.Text.IndexOf("error:", StringComparison.OrdinalIgnoreCase);
            var errorText = item.Text.Substring(errorTextIndex, 6); // Extract "error:"
            var remainingText = item.Text.Substring(errorTextIndex + 6).Trim(); // Extract the rest of the text

            <MudText Typo="Typo.h6" Color="Color.Error" Class="console-line">error:</MudText>
            <MudText Typo="@item.MudType" Color="Color.Error" Class="console-line">@remainingText</MudText>
            <br/>
        }
        else if (item.Text.Contains("warning:", StringComparison.OrdinalIgnoreCase))
        {
            // Split the text into "error" and the remaining text
            var errorTextIndex = item.Text.IndexOf("Warning:", StringComparison.OrdinalIgnoreCase);
            var errorText = item.Text.Substring(errorTextIndex, 8); // Extract "error:"
            var remainingText = item.Text.Substring(errorTextIndex + 8).Trim(); // Extract the rest of the text

            <MudText Typo="Typo.h6" Color="Color.Warning" Class="console-line">Warning:</MudText>
            <MudText Typo="@item.MudType" Color="Color.Warning" Class="console-line">@remainingText</MudText>
            <br />
        }
        else
        {
            // If there's no "error:", just display the text normally
            <MudText Typo="@item.MudType" Color="@item.MudColor" Class="console-line">@item.Text</MudText>
        }
    }
    <div id="scroll-to-bottom"></div> @* Element to scroll to *@
</MudPaper>


@code {
    [Parameter] public List<ConsoleText> ConsoleTextList { get; set; } = new List<ConsoleText>();

    [Inject] IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("ScrollToId", "scroll-to-bottom");
    }
}
