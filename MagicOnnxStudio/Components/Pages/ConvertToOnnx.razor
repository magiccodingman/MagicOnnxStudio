@page "/ConvertToOnnx"
@using MagicOnnxStudio.Components.Shared
@inject MudBlazor.IDialogService DialogService

<MagicOnnxStudio.Components.Shared.AvailableStorageBar @ref="diskProgressComponent"></MagicOnnxStudio.Components.Shared.AvailableStorageBar>


<MudDataGrid T="DownloadedModelInfo" MultiSelection="true" Items="@models" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Safetensor AI Models</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="DownloadedModelInfo"
                         ButtonDisabledFunc="@(x => onnxModels == null
|| !onnxModels.Any()
|| !onnxModels.Any(y => y.ProjectUrl.Equals(x.ProjectUrl, StringComparison.OrdinalIgnoreCase)))" />

        <PropertyColumn Property="x => x.Repo" Title="Repo" Sortable="true" Filterable="true">
            <CellTemplate>
                <MudNavLink Href="@context.Item.ProjectUrl">@context.Item.Repo</MudNavLink>

            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Owner" Title="Owner" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.TotalSizeGB" Title="Size (GB)" Sortable="true" Filterable="true">
            <CellTemplate>
                <MudStack Row>
                    @($"{Math.Round(context.Item.TotalSizeGB, 2)}")
                </MudStack>
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn>
            <CellTemplate>
                @if (context.Item.IsSafeTensor)
                {
                    <MudTooltip Text="Convert">
                        <MudIconButton Icon="@Icons.Material.Filled.ResetTv"
                                       Color="Color.Primary" OnClick="@(() => ConvertModelToOnnx(context.Item))" />
                    </MudTooltip>
                }
                else if (context.Item.IsGGUF)
                {
                    <MudTooltip Text="GGUF Not Currently Supported">
                        <MudIconButton Icon="@Icons.Material.Filled.ResetTv"
                                       Color="Color.Error" />
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Unsupported Model Type">
                        <MudIconButton Icon="@Icons.Material.Filled.ResetTv"
                                       Color="Color.Error" />
                    </MudTooltip>
                }
                <MudTooltip Text="Open File Explorer">
                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                   Color="Color.Primary" OnClick="@(() => FileHelper.OpenFolderInExplorer(context.Item.ModelPath))" />
                </MudTooltip>
                    <MudTooltip Text="Delete">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(() => DeleteAiModel(context.Item))" />
                    
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">ONNX Models Converted</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>

                <MudDataGrid T="DownloadedModelInfo" Items="@onnxModels.FindAll(y => y.ProjectUrl.Equals(context.Item.ProjectUrl, StringComparison.OrdinalIgnoreCase))">
                    <Columns>
                        <PropertyColumn Property="x => x.execution" Title="Execution" />
                        <PropertyColumn Property="x => x.precision" Title="Precision" />
                        <PropertyColumn Property="x => x.TotalSizeGB_Rounded2" Title="Size (GB)" />
                        <TemplateColumn Context="miniCon">
                            <CellTemplate>
                                <MudTooltip Text="AI Chat Test">
                                    <MudIconButton Icon="@Icons.Material.Filled.Chat"
                                                   Color="Color.Primary" OnClick="@(() => AiLaunchHelper.RunAiModel(miniCon.Item))" />
                                </MudTooltip>

                                <MudTooltip Text="Open File Explorer">
                                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"
                                                   Color="Color.Primary" OnClick="@(() => FileHelper.OpenFolderInExplorer(miniCon.Item.ModelPath))" />
                                </MudTooltip>

                                <MudTooltip Text="Delete">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(() => DeleteOnnxModel(miniCon.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>

    <PagerContent>
        <MudDataGridPager T="DownloadedModelInfo" />
    </PagerContent>
</MudDataGrid>

@code {
    private string _searchString;

    private MagicOnnxStudio.Components.Shared.AvailableStorageBar diskProgressComponent;
    // This method triggers the refresh action from the parent
    private void TriggerDiskProgressUpdate()
    {
        // Call the delegate to refresh the child component
        diskProgressComponent?.RefreshProgress?.Invoke();
    }

    string downloadPath { get; set; }
    string onnxPath { get; set; }
    private List<DownloadedModelInfo> models { get; set; } = new List<DownloadedModelInfo>();
    private List<DownloadedModelInfo> onnxModels { get; set; } = new List<DownloadedModelInfo>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Startup();
        }
    }

    private void Startup()
    {
        downloadPath = new DownloadHelper().EnsureAiModelDownloadsFolder();
        onnxPath = new DownloadHelper().EnsureAiModelDefaultOutputFolder();
        models = ModelInfoFinder.GetDownloadedModelInfos()??new List<DownloadedModelInfo>();
        onnxModels = ModelInfoFinder.GetOnnxConvertedModelInfos()??new List<DownloadedModelInfo>();

        TriggerDiskProgressUpdate();
        StateHasChanged();
    }

    private Func<DownloadedModelInfo, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (!string.IsNullOrWhiteSpace(x.Repo))
           {
               string normalizedRepoName = x.Repo.Replace("_", " ").Replace("-", " ");
               if (normalizedRepoName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                   return true;
               if (x.Repo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                   return true;
           }

           if (!string.IsNullOrWhiteSpace(x.Owner))
           {
               string normalizedOwnerName = x.Owner.Replace("_", " ").Replace("-", " ");
               if (normalizedOwnerName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                   return true;
               if (x.Owner.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                   return true;
           }

           return false;
       };

    private async Task ConvertModelToOnnx(DownloadedModelInfo modelInfo)
    {
        var options = new DialogOptions
            {
                CloseButton = false, // No close button
                BackdropClick = false,
                MaxWidth = MaxWidth.Medium
            };

        DialogParameters parameters = new DialogParameters { ["_modelInfo"] = modelInfo };

        var dialog = await DialogService.ShowAsync<ConvertAiModelToOnnx>($"Convert: {modelInfo.Repo}", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false)
        {
            Startup();
        }

    }

    private async Task DeleteAiModel(DownloadedModelInfo modelInfo)
    {
        var options = new DialogOptions
            {
                CloseButton = false, // No close button
                BackdropClick = false,
                MaxWidth = MaxWidth.Medium
            };

        DialogParameters parameters = new DialogParameters { ["_modelInfo"] = modelInfo, ["onnxModels"] = onnxModels.FindAll(y => y.ProjectUrl.Equals(modelInfo.ProjectUrl, StringComparison.OrdinalIgnoreCase)) };

        var dialog = await DialogService.ShowAsync<DeleteModel>($"Deleting: {modelInfo.Repo}", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false)
        {
            Startup();
        }
    }

    private async Task DeleteOnnxModel(DownloadedModelInfo modelInfo)
    {
        var options = new DialogOptions
            {
                CloseButton = false, // No close button
                BackdropClick = false,
                MaxWidth = MaxWidth.Medium
            };

        DialogParameters parameters = new DialogParameters { ["_modelInfo"] = modelInfo, ["_deleteOnlyModel"] = true };

        var dialog = await DialogService.ShowAsync<DeleteModel>($"Deleting: {modelInfo.Repo}", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false)
        {
            Startup();
        }

    }
}
